[{"content":"Dropbox has some well known issues on Linux which made me look at alternatives. I found an alternative that I am very happy with.\nRequirements I use Getting Things Done (GTD) which requires me to take notes. In order to reduce the barrier to take notes, I need to be able to quickly pull up my note taking tool and start writing.\nReducing this barrier for note taking is one of the key insights of GTD that helped me incorporate the framework into my life. It is important that I am able to capture a thought quickly and reliably.\nReliability is important, because in order to free my brain from thought I have to make sure that I put it somewhere safe. So the notes need to be backed up.\nIn separate sessions I go through the notes and create actionable items, usually on my laptop, so I want to have the same list of notes on both machines.\nSyncthing is Ticking All the Boxes For 2-3 years I have used Dropbox. Unfortunately, it sometimes did not sync up properly when Linux woke up from sleep/hibernation, which causes quite some merge conflicts and once even data loss.\nThe alternative should be a ubiquitous as Dropbox, meaning it should be available on all major platforms.\nFortunately, I found Syncthing. It is a piece of software runs on the devices the need to be kept in sync. There is no central server involved.\nI have used it for 3 months to sync files on my phone and my laptop. So far so great, but it only works because my phone is almost always online. It kind of takes the role of a server.\nFully Replacing Dropbox With Syncthing I decided to install Syncthing on a small VPS that is online 24/7. This makes sure that all my devices get the recent versions of the files. Additionally I am using the VPS provider\u0026rsquo;s service to take snapshot backups.\nSetting Syncthing up on a VPS running Ubuntu and connecting it to my phone and my laptop took 2 minutes. You can follow a guide to install Syncthing and then open an SSH tunnel to access the GUI for setup.\nssh -L 8888:127.0.0.1:8384 root@host Open http://127.0.0.1:8888 to start the setup process.\nAdd your existing devices to the server, which will make sure that the devices know about each other.\nNo Need to Trust the Server Encryption is the feature that sold me on Syncthing. It has built in support for untrusted devices that don\u0026rsquo;t have access to the decrypted files.\nWhen you add the untrusted device, make sure to tick the Untrusted box. In the list of folders simply set a password on the trusted device for the folders that you want to share with untrusted devices.\nThe folder type on the untrusted device should be Receive Encrypted.\n","permalink":"https://www.joseferben.com/posts/replacing_dropbox_with_syncthing/","summary":"\u003cp\u003eDropbox has \u003ca href=\"https://200ok.ch/posts/2019-11-24%5Ftrigger%5Fdropbox%5Fon%5Flinux%5Fafter%5Fsuspend%5Fhibernate.html\"\u003esome well known issues\u003c/a\u003e on Linux which made me look at alternatives. I found an alternative that I am very happy with.\u003c/p\u003e","title":"Replacing Dropbox With Syncthing"},{"content":"Dokku with its Postgres plugin can be used to manage Postgres databases, this includes automated backups.\nOnce automated backups are implemented, you end up having encrypted database dumps in your backup location (which usually is some S3 storage). These are the steps needed to decrypt, unpack and apply the backups to Postgres instance managed by Dokku that the backup was created of.\n  gpg --pinentry-mode=loopback --passphrase \u0026quot;\u0026lt;passphrase\u0026gt;\u0026quot; -d -o \u0026lt;decrypted\u0026gt;.tgz \u0026lt;encrypted\u0026gt;.tgz.gpg\n  mkdir \u0026lt;backup\u0026gt;\n  tar zxvf \u0026lt;decrypted\u0026gt;.tgz -C \u0026lt;backup\u0026gt;\n  docker exec -i \u0026lt;container_name\u0026gt; pg_restore -U admin -d dev --no-owner \u0026lt; \u0026lt;backup\u0026gt;\nI feel like these steps could be part of the great Dokku Postgres Plugin.\n ","permalink":"https://www.joseferben.com/posts/recovering_dokku_postgres_backups/","summary":"\u003cp\u003e\u003ca href=\"https://dokku.com/\"\u003eDokku\u003c/a\u003e with its Postgres plugin can be used to manage Postgres databases, this includes \u003ca href=\"https://github.com/dokku/dokku-postgres#backups\"\u003eautomated backups\u003c/a\u003e.\u003c/p\u003e","title":"Recovering Dokku Postgres Backups"},{"content":"Upgrading NixOS so that it uses a different channel is simple.\nWhen you run following command as root:\nnix-channel --list You should see a list of channels. If you did not touch channels so far, you should see this:\nnixos https://nixos.org/channels/nixos-21.05 By running the following command (as root):\nnix-channel --add https://nixos.org/channels/\u0026lt;channel version\u0026gt; nixos you will remove the 21.05 channel and replace it with .\nTo apply the change, you need to run following command:\nnixos-rebuild switch --upgrade which is going to rebuild your system with your current configuration and updated packages from the channel you switched to.\n","permalink":"https://www.joseferben.com/posts/upgrading_nixos_channels/","summary":"Upgrading NixOS so that it uses a different channel is simple.\nWhen you run following command as root:\nnix-channel --list You should see a list of channels. If you did not touch channels so far, you should see this:\nnixos https://nixos.org/channels/nixos-21.05 By running the following command (as root):\nnix-channel --add https://nixos.org/channels/\u0026lt;channel version\u0026gt; nixos you will remove the 21.05 channel and replace it with .\nTo apply the change, you need to run following command:","title":"Upgrading NixOS Channels"},{"content":"Following the NixOS installation guide I ended up with a setup using a stable NixOS channel that just keeps giving. Sometimes however, it can be necessary to include packages from an unstable channel.\nThis is the snippet that you can use in your nix configuration if you want to install unstable neovim:\n{ config, pkgs, ... }: let unstableTarball = fetchTarball https://github.com/NixOS/nixpkgs-channels/archive/nixos-unstable.tar.gz; in { imports = [ # Include the results of the hardware scan. ./hardware-configuration.nix ]; nixpkgs.config = { packageOverrides = pkgs: with pkgs; { unstable = import unstableTarball { config = config.nixpkgs.config; }; }; }; environment.systemPackages = with pkgs; [ unstable.neovim emacs ]; } ","permalink":"https://www.joseferben.com/posts/installing_only_certain_packages_form_an_unstable_nixos_channel/","summary":"\u003cp\u003eFollowing the \u003ca href=\"https://nixos.org/manual/nixos/stable/index.html#ch-installation\"\u003eNixOS installation\u003c/a\u003e guide I ended up with a setup using a stable NixOS channel that just keeps giving. Sometimes however, it can be necessary to include packages from an unstable channel.\u003c/p\u003e","title":"Installing Only Certain Packages from Unstable on NixOS"},{"content":"On Linux you can set attributes to ignore files for syncing.\nTo ignore a file on Linux:\nattr -s com.dropbox.ignored -V 1 /path/to/file To unignore a file on Linux:\nattr -r com.dropbox.ignored /path/to/file ","permalink":"https://www.joseferben.com/posts/ignoring_files_with_dropbox_on_linux/","summary":"\u003cp\u003eOn Linux you can set attributes to ignore files for syncing.\u003c/p\u003e","title":"Ignoring Files with Dropbox on Linux"},{"content":"If you use urxvt to connect to your EC2 instance through Elastic Beanstalk, running\neb ssh will give you a shell where autocomplete does not work.\nFix that by running\nTERM=\u0026#39;xterm-256color\u0026#39; eb ssh ","permalink":"https://www.joseferben.com/posts/fix_bash_autocomplete_on_elastic_beanstalk_when_using_ssh/","summary":"If you use urxvt to connect to your EC2 instance through Elastic Beanstalk, running\neb ssh will give you a shell where autocomplete does not work.\nFix that by running\nTERM=\u0026#39;xterm-256color\u0026#39; eb ssh ","title":"Fixing Bash Autocompletion on Elastic Beanstalk When Using SSH"},{"content":"3 months ago I installed NixOS, i3wm and XFCE on my new Thinkpad T14 (1st Gen). It is my main machine that I use every day. In this blog post I summarize my experience with this setup.\nSetup ▗▄▄▄ ▗▄▄▄▄ ▄▄▄▖ josef@host ▜███▙ ▜███▙ ▟███▛ -------------- ▜███▙ ▜███▙▟███▛ OS: NixOS 21.05 (Okapi) x86_64 ▜███▙ ▜██████▛ Host: 20UD0013MZ ThinkPad T14 Gen 1 ▟█████████████████▙ ▜████▛ ▟▙ Kernel: 5.14.10 ▟███████████████████▙ ▜███▙ ▟██▙ Uptime: 17 hours, 35 mins ▄▄▄▄▖ ▜███▙ ▟███▛ Packages: 1534 (nix-system), 288 (nix-user) ▟███▛ ▜██▛ ▟███▛ Shell: zsh 5.8 ▟███▛ ▜▛ ▟███▛ Resolution: 1920x1080 ▟███████████▛ ▟██████████▙ DE: Xfce 4.16 ▜██████████▛ ▟███████████▛ WM: i3 ▟███▛ ▟▙ ▟███▛ Theme: Adwaita-dark [GTK2] ▟███▛ ▟██▙ ▟███▛ Icons: Rodent [GTK2] ▟███▛ ▜███▙ ▝▀▀▀▀ Terminal: urxvt ▜██▛ ▜███▙ ▜██████████████████▛ Terminal Font: Source Code Pro ▜▛ ▟████▙ ▜████████████████▛ CPU: AMD Ryzen 7 PRO 4750U with Radeon Graphics ▟██████▙ ▜███▙ GPU: AMD ATI 07:00.0 Renoir ▟███▛▜███▙ ▜███▙ Memory: 4425MiB / 15232MiB ▟███▛ ▜███▙ ▜███▙ ▝▀▀▀ ▀▀▀▀▘ ▀▀▀▘ Window Manager + Desktop Manager Coming from Arch, I was quite comfortable using i3wm as my tiling window manager. After setting it up 4 years ago I was sure I could never go back to non-tiling windows.\nHowever, I always assumed that the trade-off of using such a productive window manager was loss of convenience. With my Arch setup, I had to mount USB sticks myself, discover, pair and connect Bluetooth devices from the command line and map media keys (such as brightness and audio volume) manually in my .config/i3/config.\nLittle did I know that I was missing a Desktop Manager!\nLet me explain in Nix:\nservices.xserver.windowManager.i3.enable = true; services.xserver.desktopManager = { xterm.enable = false; xfce = { enable = true; noDesktop = true; enableXfwm = false; }; }; This is all it took to enable i3wm as my tiling Window Manager and XFCE as my Desktop Manager. Now XFCE is taking care of all the things that macOS and Windows users take for granted, such as USB stick mounting, login screen, screensaver, centralized settings and external monitor handling. I can have all that wile tiling my windows. Best of both worlds!\nTo be fair, I recall reading about using XFCE and other desktop environments with tiling window managers. But it was NixOS that made the difference between Desktop Manager and Window Manager obvious to me.\nBattery life Coming from a T470 with an external battery so large, that it was also my laptop stand, I am not that happy with the battery life of the T14. Web development, answering emails, light browsing and occasional OCaml compilation drain the battery in about 5-6 hours.\nI activated TLP using following flag:\nservices.tlp.enable = true; I suspect that I should invest some time into understanding TLP to make most of it.\nThere was an issue with the T14 draining battery while asleep. Updating to the latest BIOS fixed this issues for me.\nCPU The CPU is hands down my favorite part of the T14. It stays cool and fast. The only time when I hear the fans is when I create OCaml switches.\nIt compiles Sihl in about 15 seconds.\nScreen My second favorite part of this machine is the screen. A bright screen allows me to work in sunny places.\nSwitching my Emacs theme to the light version allows me to work directly in the sun!\nFingerprint sensor I managed to get the fingerprint sensor working with just three lines:\nservices.fprintd.enable = true; security.pam.services.login.fprintAuth = true; security.pam.services.xscreensaver.fprintAuth = true; It works well.\nTrackpad Don\u0026rsquo;t forget to enable the trackpad, which is not done by the NixOS installer by default:\nservices.xserver.libinput.enable = true; It is just like any other Thinkpad trackpad. It is good, it does its job, but it is not an Apple trackpad.\nKernel settings I adjusted the kernel settings based on some research on similar Thinkpad models and their recommended confiration.nix.\nboot.initrd.availableKernelModules = [ \u0026#34;nvme\u0026#34; \u0026#34;ehci_pci\u0026#34; \u0026#34;xhci_pci\u0026#34; \u0026#34;usb_storage\u0026#34; \u0026#34;sd_mod\u0026#34; \u0026#34;rtsx_pci_sdmmc\u0026#34; \u0026#34;thinkpad_acpi\u0026#34; ]; boot.initrd.kernelModules = [ \u0026#34;acpi_call\u0026#34; ]; boot.kernelModules = [ \u0026#34;kvm-amd\u0026#34; ]; boot.extraModulePackages = with config.boot.kernelPackages; [ acpi_call ]; With these settings sleep and hibernation work as expected when I close the lid. Not once did the T14 wake up with a closed lid.\nSummary I am very happy with this AMD Ryzen based Thinkpad. Battery life could be better, but the bright screen and silent but powerful CPU make up for it. Everything else is typical Thinkpad level quality!\n","permalink":"https://www.joseferben.com/posts/thinkpad_t14_with_nixos_and_i3wm/","summary":"\u003cp\u003e3 months ago I installed NixOS, i3wm and XFCE on my new Thinkpad T14 (1st Gen). It is my main machine that I use every day. In this blog post I summarize my experience with this setup.\u003c/p\u003e","title":"Thinkpad T14 with NixOS and I3WM"},{"content":"I would like to give a quick shout out to Aaron Aron and his blog aronwith1a.com. This has nothing to do with the fact that I get to use the tags haskell, maths and agda.\nIf you enjoy quality original content about Haskell, Maths, formal methods or riddles, go check it out. This is a post he wrote for Oxidizing Systems about Haskell.\n","permalink":"https://www.joseferben.com/posts/aronwith1a_functional_programming_math_and_riddles/","summary":"\u003cp\u003eI would like to give a quick shout out to \u003cdel\u003eAaron\u003c/del\u003e Aron and his blog \u003ca href=\"https://www.aronwith1a.com\"\u003earonwith1a.com\u003c/a\u003e. This has nothing to do with the fact that I get to use the tags \u003ca href=\"/tags/haskell\"\u003ehaskell\u003c/a\u003e, \u003ca href=\"/tags/maths/\"\u003emaths\u003c/a\u003e and \u003ca href=\"/tags/agda/\"\u003eagda\u003c/a\u003e.\u003c/p\u003e","title":"aronwith1a.com - Functional Programming, Math and Riddles"},{"content":"You sit in a cozy coffee place and you just finished your coffee. You are still not connected to the WiFi while the MacBooks and Surface devices around you have sent and received Gigabytes of data since you sat down. You are a Linux user.\nWhat are Captive Portals? Captive portals are those web pages that magically open once you connect to some public WiFi. Sometimes you have to fill in your Email address or phone number to receive a code, but often you just have to confirm some terms of services.\nOn Linux they don\u0026rsquo;t work reliably, which is extra frustrating because you know that you are one click away from having an internet connection.\nThis is a collection of links that you can try manually to land on those captive portals.\nLinks  http://www.gstatic.com/generate_204 works in Starbucks ","permalink":"https://www.joseferben.com/posts/captive_portfals_in_coffee_shops_and_hotels_using_linux/","summary":"\u003cp\u003eYou sit in a cozy coffee place and you just finished your coffee. You are still not connected to the WiFi while the MacBooks and Surface devices around you have sent and received Gigabytes of data since you sat down. You are a Linux user.\u003c/p\u003e","title":"Captive Portals in Coffee Shops and Hotels using Linux"},{"content":"With following command you can print a random string of a certain length on Linux.\ntr -dc A-Za-z0-9 \u0026lt;/dev/urandom | head -c 32 ; echo \u0026#39;\u0026#39; The string is safe to use in most web contexts such as HTML forms or environment variables.\n","permalink":"https://www.joseferben.com/posts/generate_random_strings_on_linux_in_one_line/","summary":"With following command you can print a random string of a certain length on Linux.\ntr -dc A-Za-z0-9 \u0026lt;/dev/urandom | head -c 32 ; echo \u0026#39;\u0026#39; The string is safe to use in most web contexts such as HTML forms or environment variables.","title":"Generating Random Strings on Linux in One Line"},{"content":"Together with my SO we built hoarddit.com, a website that helps everyone to discover art. It allows you to virtually trade art pieces. This post describes how we spent our innovation points and why hoarddit is not an NFT.\nTable of Contents  The Core Mechanics The Feeling of Collecting Is It an NFT? Boring Technology Spending Innovation Points Deliberately Summary  The Core Mechanics There is a market with art pieces, currently with about 50'000 unique pieces. Some are owned by other users, but most are still owned by the bank.\nThe price for a piece is usually somewhere between 50 and 500. When you visit hoarddit.com for the first time, you are given a balance of 1000. Every 5 seconds that you spend on hoarddit, your balance gets incremented.\nYou can buy art that you like with that play money. If you can not afford a piece, just like it so you can buy it once you have enough.\nYour collection is the art that you bought and it is public. If you think you can sell a piece for a higher price, put it up for sale. Study the price chart to find trends.\nThe Feeling of Collecting When we were younger, we were always collecting something. There where different phases where everyone in primary school was collecting the same things. One year it was Yu-Gi-Oh! cards, then it was Pokemon and during the FIFA world cup it was soccer player cards.\nWith hoarddit we wanted to recreate that feeling of building up a collection. The name is an amalgamation of hoarding and reddit because that is where the art is from.\nHowever, collecting cards and collecting art on hoarddit are not the same thing. Usually there are multiple people in the world that own the same Yu-Gi-Oh! cards, but an art piece on hoarddit can have only one owner.\nWhen you buy a piece on hoarddit with your play money, you don\u0026rsquo;t actually own it. You only own the reference to the art on hoarddit. Hoarddit guarantees that no one else owns a reference to the same piece. (At least that is the promise, in reality we have to implement de-duplication.)\nOwning a reference to art. Play money. Now this rings a bell. And for some it might even raise a red flag.\nIs It an NFT? On hoarddit.com we state that the project is not an NFT. Is that really the case? Let\u0026rsquo;s examine the definition of an NFT on Wikipedia:\n A non-fungible token (NFT) is a unique and non-interchangeable unit of data stored on a digital ledger (blockchain).\n The art pieces on hoarddit are unique units of data stored in PostgreSQL. The definition says nothing about the ledger being distributed. If there was no mention about /blockchain, maybe one could argue that hoarddit is an NFT platform by this definition.\nHowever, there is no blockchain involved, there are no tokens on distributed ledgers and most importantly, no one is getting rich over night.\nIn fact, hoarddit costs couple of bucks a month to host and there are no plans to monetize it.\nBoring Technology We chose boring and tested technology that we were familiar with.\nHoarddit is a Django app using Postgres and good old server side templates. For some dynamic components HTMX was used. The design is powered by customized Bootstrap 5. For crawling and sending emails we are using Django Q.\nEmail sending uses the generous free tier of Mailjet. The whole thing is deployed on a Hetzner VPS using Dokku.\nSentry and Uptimerobot are used for monitoring and reporting.\nThis is the final picture, but it was a process to end up with this stack. A process that involved spending some innovation points.\nUpdate 22.11.2021 We should at this point define innovation points.\nIn a project, we usually try to find a good balance between trying out new innovative (and potentially more productive) ways to do something and just getting things done. We tend to innovate/tinker/experiment too much and that\u0026rsquo;s why we give ourselves a limited amount of innovation points that that we can spend within a project.\nWhile developing hoarddit, we decided to try out new things on the UI side, so that is where we spent most of the innovation points.\nOf course that is more of a mental model and there are no actual points :)\nSpending Innovation Points Deliberately Early on during development, it became clear to us that hoarddit had some dynamic elements.\nUsers expect immediate feedback after clicking a like button. I dare you to try to refresh the page after the user leaves a like. Similar story with buying and selling art pieces. The most involved dynamic element however is infinite scrolling. Pagination by clicking next is out thanks to user metrics maximization. Even websites that have pagination in their name use infinite scrolling.\n  Which approach is the best in a situation like this? We spent some innovation points to find out.\nReact vs. AlpineJS vs. Vanilla JS vs. HTMX React Having worked with NextJS and React quite a bit, it was easy to eliminate React and the SPA approach.\nWe simply could not justify having a separate build process in a second language with a separate application lifecycle. The requirements define a limited amount of interactivity.\nOf course, there is always that voice that tells you that you could power through all the complexity for a setup that can handle arbitrary dynamic and interactive web apps.\nReact is a great tool, but it might not be the best tool for the job.\nAlpineJS We like simple and small things without dependencies. AlpineJS\u0026rsquo;s philosophy seems to honor that. AlpineJS can be used with server side templates, so we decided to give it a shot.\nThe installation was super easy. You include it in your HTML, no build process needed, 10/10.\nThe first thing we implemented was the navigation bar. This was in a early version of hoarddit before we used the Bootstrap navigation component.\nThe documentation of AlpineJS is very good, we had a working navigation that opens and closes on click within seconds. So far so good.\nNext, we wanted to implement the like feature. This involved an HTTP POST request. We did not do it inline, but separated the behavior from the markup. That went quite well, too. We were able to like and unlike art pieces within minutes.\nImplementing the buy and sell features went similarly. However, we started to notice a pattern, a pattern that we did not like.\n\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;h-6 w-6\u0026#34; x-bind:fill=\u0026#34;liked ? \u0026#39;red\u0026#39; : \u0026#39;none\u0026#39;\u0026#34; fill=\u0026#34;{% if detail.liked %}red{% else %}none{% endif%}\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; x-bind:stroke=\u0026#34;liked ? \u0026#39;red\u0026#39; : \u0026#39;currentColor\u0026#39;\u0026#34; stroke=\u0026#34;{% if detail.liked %}red{% else %}none{% endif%}\u0026#34; \u0026gt; ... \u0026lt;/svg\u0026gt; It is true that with AlpineJS you get to use good old server side templates while you sprinkling some interactivity on top.\nFor more complex use cases however, there will be a lot of duplication. Templating logic has to be written twice, once in the server side templating language and once in AlpineJS.\nQuickly we found ourselves googling terms such as AlpineJS server side rendering hoping to find a solution on how to express the templates once and have Django and AlpineJS interpret them separately.\nA term that was used frequently a few years back was isomorphic rendering. This describes the template rendering process on the server and on the client being somewhat similar. If you use the term isomorphic rendering with this wonky definition and a Haskeller is nearby, you did not read it here!\nAlpineJS was a joy to use for little stateless elements like the navigation that opens and closes. Our use case seems to be too complex for it however.\nVanilla JavaScript In a moment of minimalism we decided to scrap all frameworks and libraries. What do they give us anyway apart from dependency hell and layers and layers of abstraction?\nAfter implementing the navigation in JavaScript, it became clear that we did not want to further go down this route.\nfunction loadNavigation() { const closeButton = document.getElementById(\u0026#34;navigation-close-button\u0026#34;); const openButton = document.getElementById(\u0026#34;navigation-open-button\u0026#34;); const navigationOpen = document.getElementById(\u0026#34;navigation-open\u0026#34;); const navigationClosed = document.getElementById(\u0026#34;navigation-closed\u0026#34;); closeButton.addEventListener(\u0026#39;click\u0026#39;, function (event) { navigationOpen.classList.add(\u0026#34;d-none\u0026#34;); navigationClosed.classList.remove(\u0026#34;d-none\u0026#34;); }); openButton.addEventListener(\u0026#39;click\u0026#39;, function (event) { navigationOpen.classList.remove(\u0026#34;d-none\u0026#34;); navigationClosed.classList.add(\u0026#34;d-none\u0026#34;); }); } Using JavaScript improved the dependency situation compared to AlpineJS, because there was one dependency less. But the gain was minimal, AlpineJS is just very lightweight and easy to include.\nAll of the sudden we had references to DOM nodes including the maintenance burden they bring. No thanks!\nHTMX The next piece of technology we tried out was HTMX, which further reduced the amount of JavaScript we had to write.\nMeanwhile we started using the navigation component of Bootstrap 5, so there was no custom JavaScript to write.\nFeeling empowered by the good documentation and useful examples on the HTMX website, we decided to implement infinite scrolling. Half an hour later, we had the first working version.\nIn a rush of euphoria, we decided to HTMXize the whole project; liking, unliking, selling, buying and updating the balance. It went quite well, we implemented all those features without duplicating code in the backend and on the client.\nThis is how the markup of the like feature looks like:\n\u0026lt;button id=\u0026#34;piece-detail-like-toggle-button\u0026#34; hx-post=\u0026#34;{% url \u0026#39;core:like\u0026#39; details.piece.id %}\u0026#34; hx-swap=\u0026#34;outerHtml\u0026#34; hx-target=\u0026#34;#piece-detail-dynamic\u0026#34; type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-outline-secondary\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;bi bi-suit-heart\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/button\u0026gt; HTMX truly feels like an extension of HTML, something that should have been standardized and included in HTML a while ago.\nThere seems to be a movement towards server side rendering + smartness like Liveview, Blazor, Livewire and Hotwire.\nTo this date, HTMX is powering the dynamic and interactive elements of hoarddit. There is a bit of custom JavaScript that allows the user to like a picture by double tap or the rendering of price charts.\nRunning Out of Innovation Points This blog post was written with the power of hindsight and we make it sound like we spent innovation points very precisely in a controlled way. That was not the case.\nIn search of simplicity and boredom, we initially deployed hoarddit to AWS Elastic Beanstalk. This worked quite well until we needed workers. The Beanstalk way to do this is to use a separate worker environment within the same Beanstalk project.\nBack then, hoarddit used huey which we were not able to get working on Beanstalk. So we kept trying out queues until we found one that worked. It felt weird to not have an identical setup locally, but the deployment to Beanstalk was quite ergonomic.\nAnd then we needed a staging environment. On Beanstalk, this means a second project with the same environments, which means twice the costs. The Beanstalk deployments were sometimes hanging for no obvious reason, so we decided to self host. We did not need Elastic Load Balancer anyway.\nWe got ourselves a small VPS at Hetzner and deployed everything with Dokku. Dokku is a great piece of simple technology that deserves its own blog post.\nSummary Finishing up a pet project that was built over several months with a couple of hours every other weekend feels amazing.\nHoarddit has a few active users and the early feedback we got is positive. Many requested social features that make things others do more visible.\nIf you have any feedback or feature request, don\u0026rsquo;t hesitate to reach out by social media or email at hello@hoarddit.com.\n","permalink":"https://www.joseferben.com/posts/hoarddit_a_website_to_discover_art/","summary":"\u003cp\u003eTogether with \u003ca href=\"https://www.instagram.com/tylmarple/\"\u003emy SO\u003c/a\u003e we built \u003ca href=\"https://www.hoarddit.com\"\u003ehoarddit.com\u003c/a\u003e, a website that helps everyone to discover art. It allows you to virtually trade art pieces. This post describes how we spent our innovation points and why hoarddit is not an NFT.\u003c/p\u003e","title":"Hoarddit - A Website to Discover Art"},{"content":"In order to play Anno 1404 on Proton, follow these steps.\nInstall DirectX WINEPREFIX=/home/\u0026lt;user\u0026gt;/.local/share/Steam/steamapps/compatdata/33350/pfx wine /home/\u0026lt;user\u0026gt;/.local/share/Steam/steamapps/common/Anno\\ 1404/DirectX/DXSETUP.exe Edit Engine.ini file The content of the file\n/home/\u0026lt;user\u0026gt;/.local/share/Steam/steamapps/common/Anno\\ 1404/Engine.ini \u0026lt;InitFile\u0026gt; \u0026lt;DirectXVersion\u0026gt;9\u0026lt;/DirectXVersion\u0026gt; \u0026lt;UbiSurveyTime\u0026gt;-1\u0026lt;/UbiSurveyTime\u0026gt; \u0026lt;UbiSurveyTimeStatus\u0026gt;2\u0026lt;/UbiSurveyTimeStatus\u0026gt; \u0026lt;/InitFile\u0026gt; ","permalink":"https://www.joseferben.com/posts/play_anno_1404_venice_on_proton/","summary":"\u003cp\u003eIn order to play Anno 1404 on \u003ca href=\"https://www.protondb.com/app/33350\"\u003eProton\u003c/a\u003e, follow these steps.\u003c/p\u003e","title":"Playing Anno 1404 Venice on Proton"},{"content":"Install Dropbox using NixOS in your preferred way.\nAt the top of your i3wm configuration file add\nexec dropbox \u0026amp; nix-shell -p wineWowPackages.stable \u0026lsquo;winetricks.override { wine = wineWowPackages.staging; }\u0026rsquo; WINEPREFIX=/home/josef/.steam/steam/steamapps/compatdata/33350/pfx winetricks d3dx9\n","permalink":"https://www.joseferben.com/posts/autostart_dropbox_on_nixos/","summary":"\u003cp\u003eInstall Dropbox using NixOS in your preferred way.\u003c/p\u003e","title":"Autostart Dropbox on NixOS using I3WM"},{"content":"When hosting Django applications on AWS Elastic Beanstalk, it is often required to run commands on the server to do some maintenance tasks.\nBeanstalk provisions EC2 instances which are running the web server processes. Django commands need to run in the same environment.\nYou might want to fix your shell first.\nAfter connecting using SSH with\neb ssh load the environment variables using\nexport $(cat /opt/elasticbeanstalk/deployment/env | xargs) then load the Python environment using\nsource /var/app/venv and finally run your Django command\npython /var/app/current/manage.py runserver ","permalink":"https://www.joseferben.com/posts/running_django_commands_on_aws_elastic_beanstalk/","summary":"\u003cp\u003eWhen hosting Django applications on AWS Elastic Beanstalk, it is often required to run commands on the server to do some maintenance tasks.\u003c/p\u003e","title":"Running Django Commands on AWS Elastic Beanstalk"}]